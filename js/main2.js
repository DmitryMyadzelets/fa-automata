// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var canvas, ctx, fir, getStyleProperty, get_mouse_xy, graph, init, resizeCanvas, spruce, tout, updateCanvas, x, y;

  x = y = 0;

  ctx = null;

  canvas = null;

  /*
  ===============================================================================
  */


  resizeCanvas = function(w, h) {
    if (w !== canvas.width || h !== canvas.height) {
      canvas.width = w;
      canvas.height = h;
      ctx.lineWidth = 1.2;
    }
    return null;
  };

  updateCanvas = function() {
    ctx.save();
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
    return null;
  };

  /*
  ===============================================================================
  */


  getStyleProperty = function(element, prop) {
    if (window.getComputedStyle) {
      return window.getComputedStyle(element)[prop];
    } else if (element.currentStyle) {
      return element.currentStyle[prop];
    }
    return null;
  };

  /*
  ===============================================================================
  */


  init = function(elementName) {
    var div, edge_style, node_style, v;
    div = document.getElementById('container');
    canvas = document.getElementById(elementName);
    canvas.focus();
    ctx = canvas.getContext("2d");
    ctx.lineWidth = 1.2;
    if ((v = getStyleProperty(canvas, 'backgroundColor'))) {
      draw.backgroundColor = v;
    }
    if ((v = getStyleProperty(canvas, 'font'))) {
      draw.font = v;
    }
    if ((v = getStyleProperty(canvas, 'color'))) {
      draw.fontColor = v;
    }
    if ((node_style = document.getElementById('automaton-node'))) {
      if ((v = getStyleProperty(node_style, 'backgroundColor'))) {
        draw.nodeBackgroundColor = v;
      }
      if ((v = getStyleProperty(node_style, 'color'))) {
        draw.nodeColor = v;
      }
      if ((v = getStyleProperty(node_style, 'color'))) {
        draw.nodeFontColor = v;
      }
    }
    if ((edge_style = document.getElementById('automaton-edge'))) {
      if ((v = getStyleProperty(edge_style, 'backgroundColor'))) {
        draw.edgeColor = v;
      }
      if ((v = getStyleProperty(edge_style, 'color'))) {
        draw.edgeFontColor = v;
      }
    }
    canvas.addEventListener('dragstart', function(e) {
      e.preventDefault();
      return false;
    });
    canvas.onselectstart = function() {
      return false;
    };
    resizeCanvas(div.offsetWidth, div.offsetHeight);
    window.onresize = function(ev) {
      resizeCanvas(div.offsetWidth, div.offsetHeight);
      return null;
    };
    return null;
  };

  get_mouse_xy = function(ev) {
    var rc;
    rc = canvas.getBoundingClientRect();
    return [ev.clientX - rc.left, ev.clientY - rc.top];
  };

  window.onload = function() {
    init("myCanvas");
    return null;
  };

  (tout = function() {
    console.log(".");
    return setTimeout(tout, 1000);
  })();

  graph = new Springy.Graph();

  spruce = graph.newNode({
    label: 'Norway Spruce'
  });

  fir = graph.newNode({
    label: 'Sicilian Fir'
  });

  graph.newEdge(spruce, fir);

  console.log($('#myCanvas'));

}).call(this);
