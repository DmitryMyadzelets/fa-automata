// Generated by CoffeeScript 1.6.3
(function() {
  var force, graph, height, link, node, node_radius, set_links, svg, text, width;

  graph = {
    'links': []
  };

  set_links = function() {
    var i, index, j, k, link, modules_ids, o, _i, _len, _ref;
    i = DES.E.size();
    while (i-- > 0) {
      modules_ids = DES.E.modules.get(i);
      j = modules_ids.length;
      while (j-- > 0) {
        k = j;
        while (k-- > 0) {
          _ref = graph.links;
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            link = _ref[index];
            if ((link.source === j) && (link.target === k)) {
              break;
            }
          }
          if (index === graph.links.length) {
            o = {
              'source': j,
              'target': k
            };
            graph.links.push(o);
          }
        }
      }
    }
    return null;
  };

  set_links();

  width = 600;

  height = 500;

  node_radius = 20;

  force = d3.layout.force().charge(-120).linkDistance(200).size([width, height]);

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height);

  force.nodes(DES.modules).links(graph.links).start();

  link = svg.selectAll('.link').data(graph.links).enter().append('line').attr('class', 'link').style('stroke-width', function(d) {
    return 2;
  }).style('stroke', function(d) {
    return 'gray';
  });

  node = svg.selectAll('.node').data(DES.modules).enter().append('circle').attr('class', 'node').attr('r', node_radius).style('fill', function(d) {
    return 'gray';
  }).call(force.drag);

  text = svg.selectAll('.node_name').data(DES.modules).enter().append('text').attr('text-anchor', 'middle').attr('unselectable', 'on').attr('class', 'unselectable').text(function(d) {
    return d.name;
  });

  node.append('title').text(function(d) {
    return d.name;
  });

  force.on('tick', function() {
    link.attr('x1', function(d) {
      return d.source.x;
    }).attr('y1', function(d) {
      return d.source.y;
    }).attr('x2', function(d) {
      return d.target.x;
    }).attr('y2', function(d) {
      return d.target.y;
    });
    node.attr('cx', function(d) {
      return d.x;
    }).attr('cy', function(d) {
      return d.y;
    });
    text.attr('x', function(d) {
      return d.x | 0;
    }).attr('y', function(d) {
      return (d.y | 0) - 20;
    });
  });

}).call(this);
