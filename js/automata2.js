// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var f, g;

  this.automata2 = (function() {
    var DELTA_TRANS, add, del, _this;

    add = function(arr, i) {
      var ret;

      ret = -1;
      if ((i == null) || i === arr.length) {
        arr.push(null);
        ret = arr.length - 1;
      } else {
        if (i >= 0 && i < arr.length) {
          arr.push(arr[i]);
          arr[i] = null;
          ret = i;
        }
      }
      return ret;
    };
    del = function(arr, i) {
      if (i < 0 || i >= arr.length || isNaN(i) || !(arr instanceof Array)) {
        return -1;
      }
      if (i < arr.length - 1) {
        arr.splice(i, 1, arr.pop());
      } else {
        arr.splice(i, 1);
      }
      return i;
    };
    DELTA_TRANS = 10;
    return _this = {
      create: function() {
        return {
          start: 0 | 0,
          trans: new Uint32Array(3 * DELTA_TRANS),
          nN: 0 | 0,
          nE: 0 | 0,
          nT: 0 | 0
        };
      },
      trans: {
        add: function(G, q, e, p, i) {
          var j, k, len, t;

          if (q < 0 || p < 0 || e < 0 || q >= G.nN || p >= G.nN || e >= g.nE) {
            return -1;
          }
          len = G.trans.length | 0;
          j = G.nT * 3 | 0;
          if (j + 3 > len) {
            t = new Uint32Array(len + 3 * DELTA_TRANS);
            t.set(G.trans);
            delete G.trans;
            G.trans = t;
          }
          if ((i == null) || i === G.nT) {
            G.trans[j++] = q | 0;
            G.trans[j++] = e | 0;
            G.trans[j++] = p | 0;
            return G.nT++;
          } else {
            if (i < 0 || i > G.nT) {
              return -1;
            }
            k = i * 3 | 0;
            G.trans[j++] = G.trans[k++];
            G.trans[j++] = G.trans[k++];
            G.trans[j++] = G.trans[k++];
            k -= 3;
            G.trans[k++] = q | 0;
            G.trans[k++] = e | 0;
            G.trans[k++] = p | 0;
            G.nT++;
            return i | 0;
          }
        },
        del: function(G, i) {
          var j, len, t;

          if ((i == null) || i < 0 || i >= G.nT) {
            return -1;
          }
          G.nT -= 1;
          if (i < G.nT) {
            i *= 3;
            j = G.nT * 3;
            G.trans[i++] = G.trans[j++];
            G.trans[i++] = G.trans[j++];
            G.trans[i] = G.trans[j];
          }
          len = G.trans.length;
          if ((len - G.nT * 3) > 3 * DELTA_TRANS) {
            len -= 3 * DELTA_TRANS;
            t = new Uint32Array(G.trans.subarray(0, len));
            delete G.trans;
            G.trans = t;
          }
          return G.nT;
        },
        get: function(G, i) {
          if (i < 0 || i >= G.nT) {
            return [];
          }
          return G.trans.subarray(i *= 3, i + 3);
        }
      }
    };
  })();

  g = automata2.create();

  g.nN = 10;

  g.nE = 10;

  automata2.trans.add(g, 0, 1, 2);

  automata2.trans.add(g, 3, 4, 5);

  automata2.trans.add(g, 6, 7, 8, 1);

  console.log(g.trans);

  automata2.trans.del(g, 1);

  console.log(g.trans);

  console.log(f = automata2.trans.get(g, 1));

}).call(this);
