// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var a, b,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.fa = Object.create(digraph);

  fa.extend = function(G) {
    G.start = 0;
    G.events = {
      v: []
    };
    return G;
  };

  fa.create = function() {
    var G;

    G = digraph.create();
    return fa.extend(G);
  };

  fa.events = {
    add: function(G, v, i) {
      var ix;

      if (v == null) {
        return -1;
      }
      if ((ix = G.events.v.indexOf(v)) >= 0) {
        return ix;
      }
      if (i == null) {
        i = fa.for_arrays_of(G.events, (function(arr) {
          return arr.push(null);
        })) - 1;
      } else {
        fa.for_arrays_of(G.events, (function(arr) {
          return fa.ins(arr, i);
        }));
      }
      G.events.v[i] = v;
      return i;
    },
    del: function(G, i) {
      return fa.for_arrays_of(G.events, fa.del, i);
    }
  };

  fa.BFS = function(G) {
    var E, a, b, e, stack, visited, _i, _len;

    stack = [G.start];
    visited = [G.start];
    while (stack.length) {
      a = stack.pop();
      E = this.edges.out(G, a);
      for (_i = 0, _len = E.length; _i < _len; _i++) {
        e = E[_i];
        b = G.edges.b[e];
        if (__indexOf.call(visited, b) < 0) {
          visited.push(b);
          stack.push(b);
        }
        console.log(a, "->", b);
      }
    }
    return null;
  };

  this.faxy = Object.create(fa);

  faxy.extend = function(G) {
    G.nodes.x = [];
    G.nodes.y = [];
    return G;
  };

  faxy.create = function() {
    var G;

    G = fa.create();
    return faxy.extend(G);
  };

  this.g = faxy.create();

  console.log(a = faxy.nodes.add(g));

  console.log(b = faxy.nodes.add(g));

  console.log(faxy.edges.add(g, a, b));

  console.log(faxy.edges.add(g, a, a));

  console.log(faxy.edges.add(g, b, b));

  console.log("Nodes: ", g.nodes);

  console.log("Edges: ", g.edges);

  /* TODO:
  - Make dependence consistency (nodes <- edges) for deletion 
    and (events to edges) update.
  - Structure of the application:
  	/css
  	/img
  	/js
  		/lib
  		graph.js	# Basic structures and functions
  		nfa.js 		# Non-determenistic atomaton structres and functions
  		dfa.js 		# Determenistic atomaton structres and functions
  		editor.js 	# Editor functionality
  		main.js		# Just an entry point
  	index.html
  */


}).call(this);
