// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var BINARY_SUBSET, DELTA_UINT_ARRAY, DES, E_CONFIG, NUMBER_SUBSET, OBJECT_SUBSET, T_CONFIG, X_CONFIG, addUint16ArrayValue, clrUint16ArrayBit, create_general_set, delUint16ArrayBit, enumUint16ArrayBit, getUint16ArrayBit, i, o, resizeUint16Array, setUint16ArrayBit;

  DES = {
    E: {
      size: 0,
      label: [],
      observable: [],
      controllable: []
    },
    modules: [
      {
        X: {
          start: 0,
          size: 0,
          x: [],
          y: [],
          label: [],
          marked: [],
          faulty: []
        },
        T: {
          size: 0,
          sorted: true / false
        }
      }, {
        X: {},
        T: {}
      }
    ],
    create_module: function() {}
  };

  E_CONFIG = {
    label: 'object',
    observable: 'boolean',
    controllable: 'boolean'
  };

  X_CONFIG = {
    x: 'integer',
    y: 'integer',
    label: 'object',
    marked: 'boolean',
    faulty: 'boolean'
  };

  T_CONFIG = {
    trans: 'integer_triple',
    bends: 'boolean'
  };

  getUint16ArrayBit = function(arr, i) {
    return !!(arr[i >> 4] & 1 << (i & 0xF));
  };

  setUint16ArrayBit = function(arr, i) {
    return arr[i >> 4] |= 1 << (i & 0xF);
  };

  clrUint16ArrayBit = function(arr, i) {
    return arr[i >> 4] &= ~(1 << (i & 0xF));
  };

  resizeUint16Array = function(arr, len) {
    var ret;

    if (len > arr.length) {
      ret = new Uint16Array(len);
      ret.set(arr);
    } else {
      ret = new Uint16Array(arr.subarray(0, len));
    }
    return ret;
  };

  delUint16ArrayBit = function(arr, i, bits_len) {
    bits_len -= 1;
    if (i !== bits_len) {
      if (getUint16ArrayBit(arr, bits_len)) {
        setUint16ArrayBit(arr, i);
      } else {
        clrUint16ArrayBit(arr, i);
      }
    }
    return bits_len;
  };

  enumUint16ArrayBit = function(arr, len) {
    var i, l, m, n, ret, v;

    ret = [];
    i = 0;
    l = arr.length;
    while (i < l) {
      v = arr[i];
      m = 0;
      n = i * 16;
      while (v && n + m < len) {
        if (v & 1) {
          ret.push(n + m);
        }
        v >>= 1;
        m++;
      }
      i++;
    }
    return ret;
  };

  DELTA_UINT_ARRAY = 10 | 0;

  addUint16ArrayValue = function(arr, old_len) {
    var len;

    len = old_len(+1);
    if (len >= arr.length) {
      arr = resizeUint16Array(arr, len);
    }
    return len;
  };

  BINARY_SUBSET = function() {
    var arr, o, self;

    arr = new Uint16Array(1);
    self = this;
    o = function() {
      return enumUint16ArrayBit(arr, self.size());
    };
    o.get = function(i) {
      if (i < self.size()) {
        return getUint16ArrayBit(arr, i);
      }
    };
    o.set = function(i) {
      if (i < self.size()) {
        return setUint16ArrayBit(arr, i);
      }
    };
    o.clr = function(i) {
      if (i < self.size()) {
        return clrUint16ArrayBit(arr, i);
      }
    };
    o.add = function() {
      if (this === self) {
        if ((arr.length << 4) <= self.size()) {
          arr = resizeUint16Array(arr, arr.length + 1);
        }
      }
      return null;
    };
    return o;
  };

  OBJECT_SUBSET = function() {
    var arr, o, self;

    arr = [];
    self = this;
    o = function() {
      return null;
    };
    o.get = function(i) {
      if (i < self.size()) {
        return arr[i];
      }
    };
    o.set = function(i, v) {
      if (i < self.size()) {
        return arr[i] = v;
      }
    };
    o.add = function() {
      if (this === self) {
        return arr.push(null);
      }
    };
    return o;
  };

  NUMBER_SUBSET = function() {
    var arr, o, self;

    arr = new Uint16Array(1);
    self = this;
    o = function() {};
    o.get = function(i) {
      if (i < self.size()) {
        return arr[i];
      }
    };
    o.set = function(i, v) {
      if (i < self.size()) {
        return arr[i] = v;
      }
    };
    o.add = function() {
      if (this === self) {
        return addUint16ArrayValue(arr, self.size());
      }
    };
    return o;
  };

  create_general_set = function(config) {
    var key, o, size;

    size = 0;
    config = config;
    o = function() {
      var i, key, obj, ret;

      if (arguments.length && 'number' === typeof (i = arguments[0] | 0)) {
        obj = {};
        for (key in config) {
          obj[key] = o[key].get(i);
        }
        return obj;
      }
      ret = [];
      i = size;
      while (i--) {
        obj = {};
        for (key in config) {
          obj[key] = o[key].get(i);
        }
        ret[i] = obj;
      }
      return ret;
    };
    o.size = function() {
      return size;
    };
    o.add = function() {
      var key;

      for (key in config) {
        this[key].add.apply(this);
      }
      return size++;
    };
    for (key in config) {
      switch (config[key]) {
        case 'boolean':
          o[key] = BINARY_SUBSET.apply(o);
          break;
        case 'integer':
          o[key] = new Uint16Array(1);
          break;
        case 'object':
          o[key] = OBJECT_SUBSET.apply(o);
          break;
        case 'integer_triple':
          null;
      }
    }
    return o;
  };

  console.clear();

  o = create_general_set(E_CONFIG);

  i = 33;

  while (i--) {
    o.add();
  }

  o.observable.set(0);

  o.controllable.set(32);

  o.label.set(0, 'test');

  console.log(o.size(), o.observable(), o.controllable(), o.label.get(0));

  console.log(o(32));

}).call(this);
