
// JSLint options:
/*global */
"use strict";


function Undo () {

	var stack = [];
	var ix = 0;
	var methods = {};

	this.register = function (redo, undo) {
		methods[redu] = {
			'undo' : undo
		};
	};

	this.call = function () {
		if (!arguments.lenth) { return; }
		var method = arguments.shift();
		if (methods[method]) {
			return methods[method].apply(this, arguments);
		} else {
			return method.apply(this, arguments);
		}
	}
}

Undo.prototype.undo = function () {
    console.log('Undo');
};


Undo.prototype.redo = function () {
    console.log('Redo');
};

/*
// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';  this.Undo = (function() {
    var ix, stack, transaction;

    function Undo() {}

    stack = [];

    ix = 0;

    transaction = false;

    Undo.prototype.put = function(redo_func, redo_vals, undo_func, undo_vals) {
      if (ix < stack.length) {
        stack.length = ix;
      }
      stack.push({
        redo_func: redo_func,
        redo_vals: redo_vals,
        undo_func: undo_func,
        undo_vals: undo_vals
      });
      ix = stack.length;
      return null;
    };

    Undo.prototype.undo = function() {
      var cmd, ret;

      ret = false;
      if (ix > 0) {
        while (ix > 0) {
          cmd = stack[--ix];
          cmd.undo_func.apply(this, cmd.undo_vals);
          if (!transaction) {
            break;
          }
        }
        ret = true;
      }
      return ret;
    };

    Undo.prototype.redo = function() {
      var cmd, ret;

      ret = false;
      if (ix < stack.length) {
        while (ix < stack.length) {
          cmd = stack[ix++];
          cmd.redo_func.apply(this, cmd.redo_vals);
          if (!transaction) {
            break;
          }
        }
        ret = true;
      }
      return ret;
    };

    Undo.prototype.reset = function() {
      stack.length = 0;
      return ix = 0;
    };

    Undo.prototype.set_transaction = function(state) {
      return transaction = state;
    };

    Undo.prototype.start_transaction = function() {
      return this.put(this.set_transaction, [true], this.set_transaction, [false]);
    };

    Undo.prototype.stop_transaction = function() {
      return this.put(this.set_transaction, [false], this.set_transaction, [true]);
    };

    return Undo;

  })();

}).call(this);
*/