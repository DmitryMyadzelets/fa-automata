// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var find_common_events, get_event_by_labels, ix, set_transitions, show_bfs, show_dfs, show_events, show_modules, show_modules_transitions, show_states, show_transitions,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  show_events = function() {
    console.log('Events:');
    return console.table(DES.E());
  };

  show_states = function(m) {
    console.log('States of module', m.name);
    return console.table(m.X());
  };

  show_transitions = function(m) {
    console.log('Transitions of module', m.name);
    return console.table(m.T.transitions().map(function(v) {
      return {
        from: v[0],
        event: DES.E.labels.get(v[1]),
        to: v[2]
      };
    }));
  };

  show_modules = function() {
    console.log('Modules:');
    console.table(DES.modules);
  };

  show_modules_transitions = function() {
    var m, _i, _len, _ref;

    _ref = DES.modules;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      show_transitions(m);
    }
  };

  show_dfs = function(m) {
    console.log('Depth-First Search of module', m.name);
    DES.DFS(m, function(q, e, p) {
      console.log(q, DES.E.labels.get(e), p);
      return true;
    });
  };

  show_bfs = function(m) {
    console.log('Breadth-First Search of module', m.name);
    DES.BFS(m, function(q, e, p) {
      console.log(q, DES.E.labels.get(e), p);
    });
  };

  get_event_by_labels = function(labels) {
    var i;

    i = DES.E.size();
    while (i-- > 0) {
      if (DES.E.labels.get(i) === labels) {
        break;
      }
    }
    return i;
  };

  set_transitions = function(m, transitions) {
    var eid, i, t, _i, _len;

    for (_i = 0, _len = transitions.length; _i < _len; _i++) {
      t = transitions[_i];
      if ((eid = get_event_by_labels(t[1])) >= 0) {
        m.T.transitions.set(m.T.add(), t[0], eid, t[2]);
      } else {
        console.log('Error:', t[1], 'labels not found');
      }
    }
    i = 1 + m.T.transitions.max_state();
    while (i-- > 0) {
      m.X.add();
    }
    return null;
  };

  find_common_events = function(m1, m2) {
    var common, e, e2, i, j;

    common = [];
    i = m1.T.size();
    while (i-- > 0) {
      e = m1.T.transitions.get(i)[1];
      if (__indexOf.call(common, e) >= 0) {
        continue;
      }
      j = m2.T.size();
      while (j-- > 0) {
        e2 = m2.T.transitions.get(j)[1];
        if (e2 === e) {
          common.push(e);
          break;
        }
      }
    }
    return common;
  };

  (function() {
    var E, e, events, i, key, _i, _len;

    events = [
      {
        labels: 'do_hi',
        observable: true
      }, {
        labels: 'do_lo',
        observable: true
      }, {
        labels: 'r_hi'
      }, {
        labels: 'r_lo'
      }, {
        labels: 'r_f0',
        fault: true
      }, {
        labels: 'c_hi'
      }, {
        labels: 'c_lo'
      }
    ];
    E = DES.E;
    for (_i = 0, _len = events.length; _i < _len; _i++) {
      e = events[_i];
      i = E.add();
      for (key in e) {
        E[key].set(i, e[key]);
      }
    }
    set_transitions(DES.add_module('DO'), [[0, 'do_hi', 1], [0, 'do_lo', 0], [1, 'do_hi', 1], [1, 'do_lo', 0]]);
    set_transitions(DES.add_module('Relay'), [[0, 'r_hi', 1], [0, 'r_lo', 0], [1, 'r_hi', 1], [1, 'r_lo', 0]]);
    set_transitions(DES.add_module('DO2Relay'), [[0, 'r_lo', 0], [0, 'do_lo', 0], [0, 'do_hi', 2], [2, 'r_hi', 1], [1, 'r_hi', 1], [1, 'do_hi', 1], [1, 'do_lo', 3], [3, 'r_lo', 0]]);
    set_transitions(DES.add_module('Contactor'), [[0, 'c_hi', 1], [0, 'c_lo', 0], [1, 'c_hi', 1], [1, 'c_lo', 0]]);
    return set_transitions(DES.add_module('Relay2Contactor'), [[0, 'c_lo', 0], [0, 'r_lo', 0], [0, 'r_hi', 2], [2, 'c_hi', 1], [1, 'c_hi', 1], [1, 'r_hi', 1], [1, 'r_lo', 3], [3, 'c_lo', 0]]);
  })();

  show_events();

  (function() {
    var i, sync, sys;

    sync = function(m1, m2) {
      var common;

      common = find_common_events(m1, m2);
      return DES.sync(m1, m2, common);
    };
    i = DES.modules.length - 1;
    sys = DES.modules[i--];
    while (i-- > 0) {
      sys = sync(sys, DES.modules[i]);
    }
    return DES.modules.push(sys);
  })();

  ix = 0;

  ix = DES.modules.length - 1;

  UI.show_module(DES.modules[ix]);

}).call(this);
