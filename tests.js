// Generated by CoffeeScript 1.4.0

/*
===============================================================================
This is a test of working with two depended arrays of objects.
One array is independed (fruits) and second (people) keeps indexes of array 
in (fruits). Then if we delete a member in (fruits), we must delete 
depended records in (people). But since the indexes of (fruits) are changed, 
then whe should update them in depended arrays.
Here we can get dependency access fruit[people[i]].

The another way to work arround is to have unique keys for (fruits), and have 
those keys in (people). If we delete a member of (fruits) we must delete
depended records in (people). But now we do not need to update any indexes.
Here we can not get dependency access fruits[people[i]]. Instead, we should
first index=find_key(fruits, key), then acces fruits[index].
*/


(function() {
  var order_based_access;

  order_based_access = function() {
    var add, del, fruits, get, log, people, set, update, v;
    fruits = [];
    people = [];
    update = function(arr, ixDelete, ixUpdate) {
      var i;
      i = arr.length;
      while (i-- > 0) {
        if (arr[i] === ixDelete) {
          arr.splice(i, 1);
        } else {
          if (arr[i] === ixUpdate) {
            arr[i] = ixDelete;
          }
        }
      }
      return null;
    };
    add = function(v) {
      return fruits.push(v);
    };
    del = function(ix) {
      var len;
      if ((ix < (len = fruits.length)) && (ix > -1)) {
        fruits[ix] = fruits.pop();
        update(people, ix, len - 1);
      }
      return null;
    };
    get = function(ix) {
      return fruits[ix];
    };
    set = function(ix, v) {
      return fruits[ix] = v;
    };
    add("Banana");
    add("Orange");
    add("Apple");
    add("Mango");
    people.push(1);
    people.push(3);
    log = function() {
      console.log(fruits);
      console.log(people);
      return null;
    };
    log();
    del(1);
    log();
    fruits[1];
    people[0];
    v = fruits[people[0]];
    console.log(v);
    return null;
  };

}).call(this);
