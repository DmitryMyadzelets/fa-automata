(function(){describe("Graph Editor",function(){it("Exists",function(){return expect(ged).toBeDefined;});it("Can create an instance of graph",function(){return expect(automata.create()).toBeDefined;
});describe("Undo|Redo when adds nodes",function(){var a;a=faxy.create();ged.reset();it("Can add node 1",function(){return expect(ged.nodes.add(a)).toBe(0);
});it("Adds 2nd node, has 2 nodes",function(){expect(ged.nodes.add(a)).toBe(1);return expect(a.nodes.length).toBe(2);});it("Executes Undo, has 1 node",function(){expect(ged.undo()).toBe(true);
return expect(a.nodes.length).toBe(1);});it("Executes Redo, has 2 nodes",function(){expect(ged.redo()).toBe(true);return expect(a.nodes.length).toBe(2);
});it("Executes Redo - fails",function(){return expect(ged.redo()).toBe(false);});it("2 times Undo - no fail",function(){expect(ged.undo()).toBe(true);
return expect(ged.undo()).toBe(true);});return it("3d time Undo - fails",function(){return expect(ged.undo()).toBe(false);});});describe("Undo|Redo when adds edges",function(){var a;
a=faxy.create();ged.reset();it("Adds 2 nodes, has 2 nodes",function(){expect(ged.nodes.add(a)).toBe(0);expect(ged.nodes.add(a)).toBe(1);return expect(a.nodes.length).toBe(2);
});it("Can add edge from 1 to 2",function(){return expect(ged.edges.add(a,0,1)).toBe(0);});it("Can add edge from 2 to 2",function(){return expect(ged.edges.add(a,1,1)).toBe(1);
});it("Delets edge 1 to 2",function(){return expect(ged.edges.del(a,0)).toBe(0);});it("Has 1 edge",function(){console.log(a.edges.a,a.edges.b);return expect(a.edges.length).toBe(1);
});it("Executes Undo, has 2 edges",function(){expect(ged.undo()).toBe(true);expect(a.edges.length).toBe(2);return console.log(a.edges.a,a.edges.b);});return it("And the first edge is from 1 to 2",function(){return expect((a.edges.a[0]===0)&&(a.edges.b[0]===1)).toBe(true);
});});return describe("Undo|Redo when deletes nodes",function(){var a;a=faxy.create();ged.reset();it("Adds 2 nodes, has 2 nodes",function(){expect(ged.nodes.add(a)).toBe(0);
expect(ged.nodes.add(a)).toBe(1);return expect(a.nodes.length).toBe(2);});it("Undo, has 1 node",function(){expect(ged.undo()).toBe(true);return expect(a.nodes.length).toBe(1);
});it("Redo, has 2 nodes",function(){expect(ged.redo()).toBe(true);return expect(a.nodes.length).toBe(2);});it("Adds 1 edge, has 1 edge",function(){expect(ged.edges.add(a,0,1)).toBe(0);
return expect(a.edges.length).toBe(1);});it("Deletes 1 node, has no edges",function(){expect(ged.nodes.del(a,0)).toBe(0);return expect(a.edges.length).toBe(0);
});it("Undo, has 2 nodes, 1 edge",function(){console.log(a.nodes);console.log(a.edges);expect(ged.undo()).toBe(true);expect(a.nodes.length).toBe(2);return expect(a.edges.length).toBe(1);
});return it("Redo, has 1 node, no edges",function(){expect(ged.redo()).toBe(true);expect(a.nodes.length).toBe(1);return expect(a.edges.length).toBe(0);
});});});}).call(this);