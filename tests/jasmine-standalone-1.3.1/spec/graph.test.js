// Generated by CoffeeScript 1.6.2
(function() {
  describe("Directed graph", function() {
    describe("Basic operations", function() {
      var g;

      it("Creates object", function() {
        return expect(typeof automata.create()).toBe("object");
      });
      g = automata.create();
      it("Graph.nodes is object", function() {
        return expect(typeof g.nodes).toBe("object");
      });
      it("Graph.edges is object", function() {
        return expect(typeof g.edges).toBe("object");
      });
      it("Adds 1st node", function() {
        automata.nodes.add(g);
        return expect(g.nodes.length).toBe(1);
      });
      return it("Adds 2nd node", function() {
        automata.nodes.add(g);
        return expect(g.nodes.length).toBe(2);
      });
    });
    describe("When a node deleted", function() {
      var g;

      g = automata.create();
      automata.nodes.add(g);
      automata.nodes.add(g);
      it("Deletes with right index", function() {
        automata.nodes.del(g, 0);
        return expect(g.nodes.length).toBe(1);
      });
      return it("Does not deletes with wrong index", function() {
        automata.nodes.del(g, -1);
        expect(g.nodes.length).toBe(1);
        automata.nodes.del(g, g.nodes.length);
        return expect(g.nodes.length).toBe(1);
      });
    });
    describe("When adds edges", function() {
      var g;

      g = automata.create();
      automata.nodes.add(g);
      automata.nodes.add(g);
      it("Adds with right node indexes", function() {
        automata.edges.add(g, 0, 1);
        return expect(g.edges.length).toBe(1);
      });
      return it("Does not adds with wrong node indexes", function() {
        automata.edges.add(g, -1, 1);
        return expect(g.edges.length).toBe(1);
      });
    });
    return describe("Has to remove ingoing and outhoing edges when a node removed", function() {
      var g;

      g = automata.create();
      it("Creates 2 nodes", function() {
        automata.nodes.add(g);
        automata.nodes.add(g);
        return expect(g.nodes.length).toBe(2);
      });
      it("Adds 1 edge from node 0 to 1", function() {
        automata.edges.add(g, 0, 1);
        return expect(g.edges.length).toBe(1);
      });
      it("Adds 1 edge-loop from node 1 to 1, and has 2 edges", function() {
        automata.edges.add(g, 1, 1);
        return expect(g.edges.length).toBe(2);
      });
      it("Deletes node 0", function() {
        automata.nodes.del(g, 0);
        return expect(g.nodes.length).toBe(1);
      });
      it("Has 1 edge", function() {
        return expect(g.edges.length).toBe(1);
      });
      it("Edge is a loop", function() {
        var ix;

        ix = g.edges.length;
        return expect(g.edges.a[ix] === g.edges.b[ix]).toBe(true);
      });
      it("Deletes node. No nodes for now", function() {
        automata.nodes.del(g, 0);
        return expect(g.nodes.length).toBe(0);
      });
      return it("Has no edges", function() {
        return expect(g.edges.length).toBe(0);
      });
    });
  });

}).call(this);
